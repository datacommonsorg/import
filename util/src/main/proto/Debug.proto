// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package org.datacommons.proto;

//
// A log of import processing with details on any warnings, errors, etc.
//
message Log {
    message Location {
        // Name of the file. Could be a full path or not. Typically, this is
        // an MCF file or CSV.
        optional string file = 1;
        // Line number in file, starting from 1.  Matches the row number in
        // CSV (since we do not handle newlines in values).
        optional int64 line_number = 2;
    }

    // Severity level of the message.
    enum Level {
        LEVEL_UNSPECIFIED = 0;
        LEVEL_INFO = 1;
        LEVEL_WARNING = 2;
        LEVEL_ERROR = 3;
        LEVEL_FATAL = 4;
    }

    message CounterSet {
      // Key is the name of a counter.
      map<string, int64> counters = 1;
    }

    // One log entry. This could be a sample of messages for a particular
    // counter.
    message Entry {
        optional Level level = 1;
        optional Location location = 2;
        // This must be user understandable.
        optional string user_message = 3;
        // A counter key in CounterSet.
        optional string counter_key = 4;

        // Column names set when the error corresponds to a column in the CSV.
        // The row info is in "location".
        // TODO: Set this by plumbing it into McfParser.parseTypedValue().
        repeated string column_name = 5;
    }

    // Key: Level.name()
    map<string, CounterSet> level_summary = 1;
    repeated Entry entries = 3;
    repeated StatValidationResult stats_check_summary = 4;
    optional CommandArgs command_args = 5;
    reserved 2;
}

message CommandArgs {
    enum ResolutionMode {
        RESOLUTION_MODE_UNSPECIFIED = 0;
        // No resolution necessary.
        RESOLUTION_MODE_NONE = 1;
        // Perform local-ID resolution and DCID generation, but no external-ID resolution.
        // This involves no DC Recon API calls.
        RESOLUTION_MODE_LOCAL = 2;
        // Perform local-ID resolution, external-ID resolution and DCID generation.
        RESOLUTION_MODE_FULL = 3;
    }
    optional bool existence_checks = 1;
    optional ResolutionMode resolution = 2;
    optional int32 num_threads = 3;
    optional bool stat_checks = 4;
    repeated string sample_places = 5;
}

message DataPoint {
    message DataValue {
        optional double value = 1;
        // The location in the file where this value was read from.
        repeated Log.Location locations = 2;
    }

    optional string date = 1;
    // Multiple values for a single date only happens when there's a bug.
    repeated DataValue values = 2;
}

message StatValidationResult {
    // DCID of the place.
    optional string place_dcid = 1;
    // DCID of the stat var.
    optional string stat_var_dcid = 2;
    // Additional information that characterizes the time series that this
    // StatValidationResult is validating.
    optional string measurement_method = 3;
    optional string observation_period = 4;
    optional string scaling_factor = 5;
    optional string unit = 6;

    // Information about a single stat validation check that failed.
    message StatValidationEntry {
        // Key that describes the failed validation check.
        optional string counter_key = 1;
        // DataPoints that caused this validation error.
        repeated DataPoint problem_points = 2;
        // Additional details as a message that is user understandable.
        optional string additional_details = 3;
        // Only set for percent fluctuation counters.
        optional double percent_difference = 4;
    }

    repeated StatValidationEntry validation_counters = 7;
}
