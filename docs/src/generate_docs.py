from distutils.log import error
import json
import pathlib

_ERROR_COUNTERS_JSON_PATH = pathlib.Path(__file__).parent / "error_counters.json"
_ERROR_COUNTERS_DOCS_PATH = pathlib.Path(__file__).parent / "../error_messages.md"

if __name__ == "__main__":
    output_md = """
# Error Counters
Issues found in the input files are categorized under "counters". Counters
aggregate the issues, and provide a high-level overview of what went wrong.

This page is auto-generated from `error_counters.json` to provide an 
overview of all error counters and suggested actions to remedy the issues.

Error counters with **Is Prefix?: Yes** are generated with a suffix that gives
some details on the subject of the error. For example,
`Resolution_UnresolvedExternalId_` will be appended with the ID that is not 
resolved in the reports generated by `dc-import`.
    """
    with open(_ERROR_COUNTERS_JSON_PATH, "r") as input_json:
        error_counters = json.load(input_json)["error_counters"]

    for counter in error_counters:
        counter_name = counter["counter_name"]
        counter_user_actions = counter["user_actions"]
       
        # .get() returns None if key does not exist
        counter_description = counter.get("description")
        counter_suffix_description = counter.get("suffix_description")
        
        # f-string expression part cannot include a backslash, so we use nl
        nl = "\n" 
        output_md += f"""
## {counter_name}
{"**Description:** " + counter_description if counter_description else ""}

{"**Suffix Description:** " + counter_suffix_description if counter_suffix_description else ""}

{"### Suggested User Actions" if counter_user_actions else ""}
{nl.join(["1. " + user_action for user_action in counter_user_actions])}
        """

    with open(_ERROR_COUNTERS_DOCS_PATH, "w+") as output_markdown:
        output_markdown.write(output_md)