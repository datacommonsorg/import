{
    "error_counters": [
        {
            "counter_name": "MCF_UnenclosedComplexValue",
            "description": "Complex value was not enclosed in brackets `[]` in the MCF.",
            "user_actions": [
                "Check complex values in your MCF and make sure they are enclosed in brackets",
                "Refer to the [documentation of valid complex values](complex_values.md)"
            ]
        },
        {
            "counter_name": "MCF_MalformedComplexValueParts",
            "description": "Complex value had less than 2 or more than 3 parts",
            "user_actions": ["Check that all of your complex values have either 2 or 3 parts",
                "Refer to the [documentation of valid complex values](complex_values.md)"
            ]
        },
        {
            "counter_name": "MCF_QuantityMalformedValue",
            "description": "In a complex value with 2 parts, the part that was expected to be a number was not a number",
            "user_actions": [
                "Refer to the [documentation of valid complex values](complex_values.md)"
            ]
        },
        {
            "counter_name": "MCF_InvalidLatitude",
            "description": "Invalid latitude value; must be decimal degrees with an optional N/S suffix",
            "user_actions": [
                "Refer to the [documentation of valid complex values](complex_values.md)"
            ]
        },
        {
            "counter_name": "MCF_InvalidLongitude",
            "description": "Invalid longitude value; must be decimal degrees with an optional E/W suffix",
            "user_actions": [
                "Refer to the [documentation of valid complex values](complex_values.md)"
            ]
        },
        {
            "counter_name": "MCF_QuantityRangeMalformedValues",
            "description": "An unexpected part was found in the complex value in MCF, error message will specify the type of issue",
            "user_actions": [
                "Either the start or end components are wrong, or at least one of the components have to be a number. Check the error message in `report.json`.",
                "Refer to the [documentation of valid complex values](complex_values.md)"
            ]
        },
        {
            "counter_name": "Resolution_UnresolvedExternalId_",
            "description": "External ID reference could not be resolved.",
            "suffix_description":  "Property for which the ID could not be resolved.",
            "user_actions": []
        },
        {
            "counter_name": "Resolution_DivergingDcidsForExternalIds_",
            "description": "Resolving external IDs found different DCIDs.",
            "suffix_description":  "The properties that were found, separated by an underscore `_`",
            "user_actions": []
        },
        {
            "counter_name": "Mutator_MissingTypeOf",
            "description": "MCF node missing typeOf property",
            "user_actions": []
        },
        {
            "counter_name": "Mutator_InvalidObsValue",
            "description": "Observation value must be either a number or text",
            "user_actions": []
        },
        {
            "counter_name": "MCF_MalformedColonLessLine",
            "description": "MCF line was missing a colon to separate the property and the value",
            "user_actions": []
        },
        {
            "counter_name": "MCF_MalformedNodeName",
            "description": "Value of `Node` prop either included a comma or started with a quote.",
            "user_actions": ["Check the error message for the specific of the malformation."]
        },
        {
            "counter_name": "TMCF_MalformedEntity",
            "description": "Found an entity name without the required E: prefix",
            "user_actions": []
        },
        {
            "counter_name": "MCF_UnexpectedProperty",
            "description": "Property found without a preceding line with 'Node'",
            "user_actions": []
        },
        {
            "counter_name": "MCF_MalformedNode",
            "description": "Found a 'Node' without properties",
            "user_actions": []
        },
        {
            "counter_name": "Resolution_IrreplaceableLocalRef",
            "description": "Unable to replace a local reference",
            "user_actions": ["This is likely a cycle of local references, which the import tool is not able to resolve. Check your MCF files for potential cycles."]
        },
        {
            "counter_name": "Resolution_UnassignableNodeDcid",
            "description": "Unable to assign DCID due to unresolved local reference",
            "user_actions": ["See actions for `Resolution_IrreplaceableLocalRef`"]
        },
        {
            "counter_name": "Resolution_DcidAssignmentFailure_",
            "description": "The node could not be assigned a DCID based on the data available",
            "suffix_description":  "The typeOf value of the node (first value, if multiple)",
            "user_actions": []
        },
        {
            "counter_name": "Resolution_OrphanLocalReference_",
            "description": "The local ID of the node is missing from the entire sub-graph",
            "suffix_description":  "The property this reference was found in",
            "user_actions": []
        },
        {
            "counter_name": "Resolution_ReferenceToFailedNode_",
            "description": "The reference was resolved, but to a failed node, therefore, this node was also failed to resolve",
            "suffix_description": "The property this reference was found in",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_InconsistentSvObsValues",
            "description": "Found nodes with different values for the same StatVarObservation",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_SameDcidForDifferentStatVars",
            "description": "Found nodes with different values for the same StatVarObservation",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_DifferentDcidsForSameStatVar",
            "description": "Found different curated IDs for same StatVar",
            "user_actions": []
        },
        {
            "counter_name": "CSV_HeaderFailure",
            "description": "Unable to parse header from CSV file",
            "user_actions": []
        },
        {
            "counter_name": "CSV_TmcfCheckFailure",
            "description": "There was a fatal sanity error in TMCF",
            "user_actions": ["Check counter messages that start with Sanity_ for FATAL error level"]
        },
        {
            "counter_name": "Sanity_TmcfMissingEntityDef",
            "description": "No definition found for a referenced 'E:' value",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_UnexpectedNonColumn",
            "description": "Expected value to be a TMCF column that starts with 'C:', but did not find a column.",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_TmcfMissingColumn",
            "description": "Column referred to in TMCF is missing from CSV header",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_UnknownStatType",
            "description": "Found an unknown statType value",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_InvalidObsDate",
            "description": "Found a non-ISO8601 compliant date value",
            "user_actions": ["ISO8601 is in the format YYYY-MM-DD (e.g. 2020-07-10), optionally with time of day appended."]
        },
        {
            "counter_name": "Sanity_NonDoubleObsValue",
            "description": "Found an Observation value that was not a number.",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_ObsMissingValueProp",
            "description": "Observation node missing value property",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_EmptyProperty",
            "description": "An empty property (property with no text) was found",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_NotInitLowerPropName",
            "description": "Found property name that does not start with a lower-case",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_MultipleDcidValues",
            "description": "Found dcid with more than one value",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_DcidTableEntity",
            "description": "Value of DCID property was an 'E:' reference in TMCF, which is invalid",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_VeryLongDcid",
            "description": "Found a DCID that was too long",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_NonAsciiValueInNonText",
            "description": "Found non-ASCII characters in a value which was not a text (a text value is a value surrounded by quotes)",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_RefPropHasNonRefValue",
            "description": "Found text/numeric value in a property where the value is expected to be a reference",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_InvalidChars_",
            "description": "DCID included invalid characters.",
            "suffix_description":  "The property whose value included invalid chars",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_UnexpectedPropIn",
            "description": "A property was found that was not expected for the type of the Node",
            "suffix_description":  "The type of the node",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_EmptySchemaValue",
            "description": "Found empty value for a property",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_NonAsciiValueInSchema",
            "description": "Schema node has property values with non-ascii characters",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_DcidNameMismatchInSchema",
            "description": "The name and the DCID of Schema nodes must match, but this node did not satisfy this requirement",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_MissingOrEmpty_",
            "description": "Found a missing or empty property value",
            "suffix_description":  "The missing property that was required.",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_MultipleVals_",
            "description": "Found multiple values for single-value property",
            "suffix_description":  "The property with the multiple values",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_NotInitUpper_",
            "description": "Found a class reference that does not start with an upper-case",
            "suffix_description":  "The property, and optionally, the type of the node separated with an underscore (`_`) from the property.",
            "user_actions": []
        },
        {
            "counter_name": "Sanity_NotInitLower_",
            "description": "Found a property reference that does not start with a lower-case",
            "suffix_description":  "The property, and optionally, the type of the node separated with an underscore (`_`) from the property.",
            "user_actions": []
        },
        {
            "counter_name": "CSV_InconsistentRows",
            "description": "A CSV row had different number of columns from the rest of the file",
            "user_actions": []
        },
        {
            "counter_name": "CSV_MalformedDCIDFailures",
            "description": "Malformed CSV value for dcid property; must be a text or reference",
            "user_actions": []
        },
        {
            "counter_name": "TMCF_TmcfEntityAsDcid",
            "description": "In TMCF, value of DCID was an E: entity. Must be a C: column or a constant value instead.",
            "user_actions": []
        },
        {
            "counter_name": "CSV_EmptyDcidReferences",
            "description": "A reference in the form of dcid:{entity} was detected, but {entity} was empty",
            "user_actions": []
        },
        {
            "counter_name": "TMCF_UnexpectedNonColumn",
            "description": "Expected value to be a TMCF column that starts with 'C:' :: value, but it was not.",
            "user_actions": []
        },
        {
            "counter_name": "CSV_TmcfMissingColumn",
            "description": "Column referred to in TMCF is missing from CSV header",
            "user_actions": []
        },
        {
            "counter_name": "CSV_UnexpectedRow",
            "description": "Found row with fewer columns than expected",
            "user_actions": []
        },
        {
            "counter_name": "Existence_FailedDcCall",
            "description": "Network request to DataCommons API failed",
            "user_actions": []
        },
        {
            "counter_name": "Existence_MissingReference",
            "description": "External reference existence check with the DataCommons API returned no results",
            "user_actions": []
        },
        {
            "counter_name": "Existence_MissingTriple",
            "description": "External triple existence check with the DataCommons API returned no results",
            "user_actions": []
        },
        {
            "counter_name": "TMCF_UnsupportedColumnNameInProperty",
            "description": "TMCF properties as references to CSV columns are not supported yet",
            "user_actions": []
        },
        {
            "counter_name": "MCF_MalformedComplexValue",
            "description": "Found malformed Complex value without a closing ] bracket",
            "user_actions": []
        },
        {
            "counter_name": "MCF_LocalReferenceInResolvedFile",
            "description": "Found an internal 'l:' reference in resolved entity value",
            "user_actions": []
        },
        {
            "counter_name": "TMCF_MalformedSchemaTerm",
            "description": "TMCF had a malformed entity/column; the value must have a '->' delimeter but this was not found",
            "user_actions": []
        }
    ]
}
