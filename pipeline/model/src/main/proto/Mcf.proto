syntax = "proto2";

package org.datacommons.proto;

// Proto representation of a Data Commons sub-graph which may be made of instance nodes (INSTANCE_MCF)
// or template nodes (TEMPLATE_MCF).
message McfGraph {
  // Represents a single value.
  message TypedValue {
    optional ValueType type = 1;
    optional string value = 2;

    // Debug info.  If this value came from a CSV, then the corresponding column name.
    // The row number is within locations in PropertyValues.
    optional string column = 3;
  }

  // Represents a list of property values.
  message Values {
    // A list of typed values.
    repeated TypedValue typed_values = 1;
  }

  // Information about a node.
  message PropertyValues {
    // Map of a property name to its values.
    map<string, Values> pvs = 1;

    // Information identifying the location of this node in the source.
    // There can be multiple if PVs in this node are merged from different files.
    // repeated Location locations = 2;

    // Debug info. For nodes that are generated from TMCF/CSV, this refers to the template Node.
    optional string template_node = 3;
    // Debug info. Error message for setting comments while serializing a node.
    optional string error_message = 4;
  }

  // Type of the sub-graph.
  optional McfType type = 1 [default = INSTANCE_MCF];

  // A map from Local Node ID to its property and values.
  map<string, PropertyValues> nodes = 2;
}

// Type of MCF sub-graph.
enum McfType {
  UNKNOWN_MCF_TYPE = 0;
  // The sub-graph is made of instances.
  INSTANCE_MCF = 1;
  // The sub-graph is made of templates.
  TEMPLATE_MCF = 2;
}

// Represents the type of property value.
enum ValueType {
  UNKNOWN_VALUE_TYPE = 0;

  // Any value that has double quotes around it gets considered a text.
  TEXT = 1;

  // Any non-text and non-reference value gets interpreted as number (int /
  // uint / double / float).
  NUMBER = 2;

  // Represents a reference to a node that has not yet been resolved.  These
  // types should turn into RESOLVED_REF after entity resolution.
  // REQUIRES: the value has a reference prefix (aka, "<id-space>:"), typically "l:".
  UNRESOLVED_REF = 3;

  // Represents a resolved datacommons entity. Stores a DCID value.
  RESOLVED_REF = 4;

  // Represents a complex value corresponding to Quantity, QuantityRange, LatLng, etc.
  COMPLEX_VALUE = 5;

  // Represents a table column for TEMPLATE_MCF.
  TABLE_COLUMN = 6;
  // Represents a table entity for TEMPLATE_MCF.
  TABLE_ENTITY = 7;
}

// Space-efficient representation of MCF data for one time-series of StatVarObs.
// This is effectively similar to SourceSeries, but with free PVs per SVObs.
message MCFStatVarObsSeries {
  message StatVarObs {
    required string date = 1;

    oneof val {
      // Vast majority of values are numbers, storing them as double will be
      // more space efficient.
      double number = 2;
      string text = 3;
    }

    // Any additional PVs associated with the StatVarObs.
    optional McfGraph.PropertyValues pvs = 4;
    required string dcid = 5;

    // If empty, it means that local_node_id is the same as dcid.
    optional string local_node_id = 6;
  }

  message Key {
    required string observation_about = 1;
    required string variable_measured = 2;
    optional string measurement_method = 3;
    optional string observation_period = 4;
    optional string scaling_factor = 5;
    optional string unit = 6;
  }

  required Key key = 1;
  repeated StatVarObs sv_obs_list = 2;
}

// A wrapper over space-efficient representations of MCF data.
message MCFOptimizedGraph {
  oneof record {
    MCFStatVarObsSeries sv_obs_series = 1;
  }
}
